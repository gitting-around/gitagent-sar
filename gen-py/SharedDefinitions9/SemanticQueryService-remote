#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import TSSLSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

from SharedDefinitions9 import SemanticQueryService
from SharedDefinitions9.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print('')
  print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] function [arg1 [arg2...]]')
  print('')
  print('Functions:')
  print('   getAllTasks()')
  print('   getAllActions()')
  print('   getAllVehicles()')
  print('  i32 getNewMissionID()')
  print('   getAllMissionIDs()')
  print('  i32 getOngoingMissionID()')
  print('  Vehicle getVehicle(i32 vid)')
  print('   getOntologySalinity(i32 missionId)')
  print('   getOntologyLandmarks(i32 missionId)')
  print('   getEvents(i32 missionId, i64 timeReference)')
  print('  TimedSpeed querySpeed(Vehicle v)')
  print('  Position queryPosition(Vehicle v)')
  print('  Orientation queryOrientation(Vehicle v)')
  print('   queryAllPh(i32 missionId)')
  print('   queryAllH2S(i32 missionId)')
  print('   queryRefCoords(i32 missionId)')
  print('   queryAllSalinity(i32 missionId)')
  print('   queryAllLandmarks(i32 missionId)')
  print('   queryAllTemperature(i32 missionId)')
  print('   queryMissionStateVector(i32 missionId, i64 timeReference)')
  print('  Vehicle queryVehicleStateVector(i32 missionId, i32 vehicleId, i64 timeReference)')
  print('   queryPh(i32 missionId, double latitude, double longitude, double radius)')
  print('   queryH2S(i32 missionId, double latitude, double longitude, double radius)')
  print('   queryCurrent(i32 missionId, double latitude, double longitude, double radius)')
  print('   queryPressure(i32 missionId, double latitude, double longitude, double radius)')
  print('   querySalinity(i32 missionID, double latitude, double longitude, double radius)')
  print('   queryLandmarks(i32 missionId, double latitude, double longitude, double radius)')
  print('   queryTemperature(i32 missionId, double latitude, double longitude, double radius)')
  print('  void storeEvent(i32 missionId, i32 vehicleId, i32 subtype, string description, i64 timeReference)')
  print('  void storePressure(i32 missionId, double latitude, double longitude, double pressure, i64 timeReference)')
  print('  void storePh(i32 missionId, double latitude, double longitude, double depth, double ph, i64 timeReference)')
  print('  void storeH2S(i32 missionId, double latitude, double longitude, double depth, double h2s, i64 timeReference)')
  print('  void storeLandmarks(i32 missionId, double latitude, double longitude, string name, string url, i64 timeReference)')
  print('  void storeTemperature(i32 missionId, double latitude, double longitude, double depth, double temperature, i64 timeReference)')
  print('  void storeCurrent(i32 missionId, double latitude, double longitude, double depth, double currentEast, double currentNorth, i64 timeReference)')
  print('  void storeSalinity(i32 missionId, i32 vehicleId, double latitude, double longitude, double depth, double altitude, double salinity, i64 timeReference)')
  print('  string ping()')
  print('')
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
  ssl = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSSLSocket.TSSLSocket(host, port, validate=False) if ssl else TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = SemanticQueryService.Client(protocol)
transport.open()

if cmd == 'getAllTasks':
  if len(args) != 0:
    print('getAllTasks requires 0 args')
    sys.exit(1)
  pp.pprint(client.getAllTasks())

elif cmd == 'getAllActions':
  if len(args) != 0:
    print('getAllActions requires 0 args')
    sys.exit(1)
  pp.pprint(client.getAllActions())

elif cmd == 'getAllVehicles':
  if len(args) != 0:
    print('getAllVehicles requires 0 args')
    sys.exit(1)
  pp.pprint(client.getAllVehicles())

elif cmd == 'getNewMissionID':
  if len(args) != 0:
    print('getNewMissionID requires 0 args')
    sys.exit(1)
  pp.pprint(client.getNewMissionID())

elif cmd == 'getAllMissionIDs':
  if len(args) != 0:
    print('getAllMissionIDs requires 0 args')
    sys.exit(1)
  pp.pprint(client.getAllMissionIDs())

elif cmd == 'getOngoingMissionID':
  if len(args) != 0:
    print('getOngoingMissionID requires 0 args')
    sys.exit(1)
  pp.pprint(client.getOngoingMissionID())

elif cmd == 'getVehicle':
  if len(args) != 1:
    print('getVehicle requires 1 args')
    sys.exit(1)
  pp.pprint(client.getVehicle(eval(args[0]),))

elif cmd == 'getOntologySalinity':
  if len(args) != 1:
    print('getOntologySalinity requires 1 args')
    sys.exit(1)
  pp.pprint(client.getOntologySalinity(eval(args[0]),))

elif cmd == 'getOntologyLandmarks':
  if len(args) != 1:
    print('getOntologyLandmarks requires 1 args')
    sys.exit(1)
  pp.pprint(client.getOntologyLandmarks(eval(args[0]),))

elif cmd == 'getEvents':
  if len(args) != 2:
    print('getEvents requires 2 args')
    sys.exit(1)
  pp.pprint(client.getEvents(eval(args[0]),eval(args[1]),))

elif cmd == 'querySpeed':
  if len(args) != 1:
    print('querySpeed requires 1 args')
    sys.exit(1)
  pp.pprint(client.querySpeed(eval(args[0]),))

elif cmd == 'queryPosition':
  if len(args) != 1:
    print('queryPosition requires 1 args')
    sys.exit(1)
  pp.pprint(client.queryPosition(eval(args[0]),))

elif cmd == 'queryOrientation':
  if len(args) != 1:
    print('queryOrientation requires 1 args')
    sys.exit(1)
  pp.pprint(client.queryOrientation(eval(args[0]),))

elif cmd == 'queryAllPh':
  if len(args) != 1:
    print('queryAllPh requires 1 args')
    sys.exit(1)
  pp.pprint(client.queryAllPh(eval(args[0]),))

elif cmd == 'queryAllH2S':
  if len(args) != 1:
    print('queryAllH2S requires 1 args')
    sys.exit(1)
  pp.pprint(client.queryAllH2S(eval(args[0]),))

elif cmd == 'queryRefCoords':
  if len(args) != 1:
    print('queryRefCoords requires 1 args')
    sys.exit(1)
  pp.pprint(client.queryRefCoords(eval(args[0]),))

elif cmd == 'queryAllSalinity':
  if len(args) != 1:
    print('queryAllSalinity requires 1 args')
    sys.exit(1)
  pp.pprint(client.queryAllSalinity(eval(args[0]),))

elif cmd == 'queryAllLandmarks':
  if len(args) != 1:
    print('queryAllLandmarks requires 1 args')
    sys.exit(1)
  pp.pprint(client.queryAllLandmarks(eval(args[0]),))

elif cmd == 'queryAllTemperature':
  if len(args) != 1:
    print('queryAllTemperature requires 1 args')
    sys.exit(1)
  pp.pprint(client.queryAllTemperature(eval(args[0]),))

elif cmd == 'queryMissionStateVector':
  if len(args) != 2:
    print('queryMissionStateVector requires 2 args')
    sys.exit(1)
  pp.pprint(client.queryMissionStateVector(eval(args[0]),eval(args[1]),))

elif cmd == 'queryVehicleStateVector':
  if len(args) != 3:
    print('queryVehicleStateVector requires 3 args')
    sys.exit(1)
  pp.pprint(client.queryVehicleStateVector(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'queryPh':
  if len(args) != 4:
    print('queryPh requires 4 args')
    sys.exit(1)
  pp.pprint(client.queryPh(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'queryH2S':
  if len(args) != 4:
    print('queryH2S requires 4 args')
    sys.exit(1)
  pp.pprint(client.queryH2S(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'queryCurrent':
  if len(args) != 4:
    print('queryCurrent requires 4 args')
    sys.exit(1)
  pp.pprint(client.queryCurrent(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'queryPressure':
  if len(args) != 4:
    print('queryPressure requires 4 args')
    sys.exit(1)
  pp.pprint(client.queryPressure(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'querySalinity':
  if len(args) != 4:
    print('querySalinity requires 4 args')
    sys.exit(1)
  pp.pprint(client.querySalinity(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'queryLandmarks':
  if len(args) != 4:
    print('queryLandmarks requires 4 args')
    sys.exit(1)
  pp.pprint(client.queryLandmarks(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'queryTemperature':
  if len(args) != 4:
    print('queryTemperature requires 4 args')
    sys.exit(1)
  pp.pprint(client.queryTemperature(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'storeEvent':
  if len(args) != 5:
    print('storeEvent requires 5 args')
    sys.exit(1)
  pp.pprint(client.storeEvent(eval(args[0]),eval(args[1]),eval(args[2]),args[3],eval(args[4]),))

elif cmd == 'storePressure':
  if len(args) != 5:
    print('storePressure requires 5 args')
    sys.exit(1)
  pp.pprint(client.storePressure(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),eval(args[4]),))

elif cmd == 'storePh':
  if len(args) != 6:
    print('storePh requires 6 args')
    sys.exit(1)
  pp.pprint(client.storePh(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),eval(args[4]),eval(args[5]),))

elif cmd == 'storeH2S':
  if len(args) != 6:
    print('storeH2S requires 6 args')
    sys.exit(1)
  pp.pprint(client.storeH2S(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),eval(args[4]),eval(args[5]),))

elif cmd == 'storeLandmarks':
  if len(args) != 6:
    print('storeLandmarks requires 6 args')
    sys.exit(1)
  pp.pprint(client.storeLandmarks(eval(args[0]),eval(args[1]),eval(args[2]),args[3],args[4],eval(args[5]),))

elif cmd == 'storeTemperature':
  if len(args) != 6:
    print('storeTemperature requires 6 args')
    sys.exit(1)
  pp.pprint(client.storeTemperature(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),eval(args[4]),eval(args[5]),))

elif cmd == 'storeCurrent':
  if len(args) != 7:
    print('storeCurrent requires 7 args')
    sys.exit(1)
  pp.pprint(client.storeCurrent(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),eval(args[4]),eval(args[5]),eval(args[6]),))

elif cmd == 'storeSalinity':
  if len(args) != 8:
    print('storeSalinity requires 8 args')
    sys.exit(1)
  pp.pprint(client.storeSalinity(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),eval(args[4]),eval(args[5]),eval(args[6]),eval(args[7]),))

elif cmd == 'ping':
  if len(args) != 0:
    print('ping requires 0 args')
    sys.exit(1)
  pp.pprint(client.ping())

else:
  print('Unrecognized method %s' % cmd)
  sys.exit(1)

transport.close()
