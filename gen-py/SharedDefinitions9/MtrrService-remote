#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import TSSLSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

from SharedDefinitions9 import MtrrService
from SharedDefinitions9.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print('')
  print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] function [arg1 [arg2...]]')
  print('')
  print('Functions:')
  print('  void requestUpdateStatus()')
  print('  void sendPlan(Mission plan)')
  print('  string abortMissionPlan(i32 missionId)')
  print('  string abortVehiclePlan(i32 vehicleId)')
  print('  string abortMissionPlanHard(i32 missionId)')
  print('  string abortVehiclePlanHard(i32 vehicleId)')
  print('  string ping()')
  print('')
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
  ssl = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSSLSocket.TSSLSocket(host, port, validate=False) if ssl else TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = MtrrService.Client(protocol)
transport.open()

if cmd == 'requestUpdateStatus':
  if len(args) != 0:
    print('requestUpdateStatus requires 0 args')
    sys.exit(1)
  pp.pprint(client.requestUpdateStatus())

elif cmd == 'sendPlan':
  if len(args) != 1:
    print('sendPlan requires 1 args')
    sys.exit(1)
  pp.pprint(client.sendPlan(eval(args[0]),))

elif cmd == 'abortMissionPlan':
  if len(args) != 1:
    print('abortMissionPlan requires 1 args')
    sys.exit(1)
  pp.pprint(client.abortMissionPlan(eval(args[0]),))

elif cmd == 'abortVehiclePlan':
  if len(args) != 1:
    print('abortVehiclePlan requires 1 args')
    sys.exit(1)
  pp.pprint(client.abortVehiclePlan(eval(args[0]),))

elif cmd == 'abortMissionPlanHard':
  if len(args) != 1:
    print('abortMissionPlanHard requires 1 args')
    sys.exit(1)
  pp.pprint(client.abortMissionPlanHard(eval(args[0]),))

elif cmd == 'abortVehiclePlanHard':
  if len(args) != 1:
    print('abortVehiclePlanHard requires 1 args')
    sys.exit(1)
  pp.pprint(client.abortVehiclePlanHard(eval(args[0]),))

elif cmd == 'ping':
  if len(args) != 0:
    print('ping requires 0 args')
    sys.exit(1)
  pp.pprint(client.ping())

else:
  print('Unrecognized method %s' % cmd)
  sys.exit(1)

transport.close()
