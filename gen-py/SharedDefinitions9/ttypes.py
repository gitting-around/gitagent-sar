#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class VehicleType:
  ROV = 0
  AUV = 1
  USV = 2
  VESSEL = 3

  _VALUES_TO_NAMES = {
    0: "ROV",
    1: "AUV",
    2: "USV",
    3: "VESSEL",
  }

  _NAMES_TO_VALUES = {
    "ROV": 0,
    "AUV": 1,
    "USV": 2,
    "VESSEL": 3,
  }

class EquipmentType:
  CAMERA = 0
  SONAR = 1
  PROPULSION = 2
  H2S = 3
  LIGHT = 4
  GPS = 5
  ACOUSTIC = 6
  USBL = 7
  WIFI = 8
  ARM = 9
  ENERGY = 10
  SALINITY = 11

  _VALUES_TO_NAMES = {
    0: "CAMERA",
    1: "SONAR",
    2: "PROPULSION",
    3: "H2S",
    4: "LIGHT",
    5: "GPS",
    6: "ACOUSTIC",
    7: "USBL",
    8: "WIFI",
    9: "ARM",
    10: "ENERGY",
    11: "SALINITY",
  }

  _NAMES_TO_VALUES = {
    "CAMERA": 0,
    "SONAR": 1,
    "PROPULSION": 2,
    "H2S": 3,
    "LIGHT": 4,
    "GPS": 5,
    "ACOUSTIC": 6,
    "USBL": 7,
    "WIFI": 8,
    "ARM": 9,
    "ENERGY": 10,
    "SALINITY": 11,
  }

class TaskRegionType:
  Point = 0
  Column = 1
  Area = 2

  _VALUES_TO_NAMES = {
    0: "Point",
    1: "Column",
    2: "Area",
  }

  _NAMES_TO_VALUES = {
    "Point": 0,
    "Column": 1,
    "Area": 2,
  }

class TaskStatus:
  NotStarted = 0
  Running = 1
  Finished = 2
  Stopped = 3

  _VALUES_TO_NAMES = {
    0: "NotStarted",
    1: "Running",
    2: "Finished",
    3: "Stopped",
  }

  _NAMES_TO_VALUES = {
    "NotStarted": 0,
    "Running": 1,
    "Finished": 2,
    "Stopped": 3,
  }


class Position:
  """
  Attributes:
   - longitude
   - latitude
   - altitude
   - depth
   - lastUpdate
  """

  thrift_spec = (
    None, # 0
    (1, TType.DOUBLE, 'longitude', None, None, ), # 1
    (2, TType.DOUBLE, 'latitude', None, None, ), # 2
    (3, TType.DOUBLE, 'altitude', None, None, ), # 3
    (4, TType.DOUBLE, 'depth', None, None, ), # 4
    (5, TType.I64, 'lastUpdate', None, None, ), # 5
  )

  def __init__(self, longitude=None, latitude=None, altitude=None, depth=None, lastUpdate=None,):
    self.longitude = longitude
    self.latitude = latitude
    self.altitude = altitude
    self.depth = depth
    self.lastUpdate = lastUpdate

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.DOUBLE:
          self.longitude = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.DOUBLE:
          self.latitude = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.DOUBLE:
          self.altitude = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.DOUBLE:
          self.depth = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.lastUpdate = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Position')
    if self.longitude is not None:
      oprot.writeFieldBegin('longitude', TType.DOUBLE, 1)
      oprot.writeDouble(self.longitude)
      oprot.writeFieldEnd()
    if self.latitude is not None:
      oprot.writeFieldBegin('latitude', TType.DOUBLE, 2)
      oprot.writeDouble(self.latitude)
      oprot.writeFieldEnd()
    if self.altitude is not None:
      oprot.writeFieldBegin('altitude', TType.DOUBLE, 3)
      oprot.writeDouble(self.altitude)
      oprot.writeFieldEnd()
    if self.depth is not None:
      oprot.writeFieldBegin('depth', TType.DOUBLE, 4)
      oprot.writeDouble(self.depth)
      oprot.writeFieldEnd()
    if self.lastUpdate is not None:
      oprot.writeFieldBegin('lastUpdate', TType.I64, 5)
      oprot.writeI64(self.lastUpdate)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.longitude)
    value = (value * 31) ^ hash(self.latitude)
    value = (value * 31) ^ hash(self.altitude)
    value = (value * 31) ^ hash(self.depth)
    value = (value * 31) ^ hash(self.lastUpdate)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Orientation:
  """
  Attributes:
   - roll
   - pitch
   - yaw
   - lastUpdate
  """

  thrift_spec = (
    None, # 0
    (1, TType.DOUBLE, 'roll', None, None, ), # 1
    (2, TType.DOUBLE, 'pitch', None, None, ), # 2
    (3, TType.DOUBLE, 'yaw', None, None, ), # 3
    (4, TType.I64, 'lastUpdate', None, None, ), # 4
  )

  def __init__(self, roll=None, pitch=None, yaw=None, lastUpdate=None,):
    self.roll = roll
    self.pitch = pitch
    self.yaw = yaw
    self.lastUpdate = lastUpdate

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.DOUBLE:
          self.roll = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.DOUBLE:
          self.pitch = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.DOUBLE:
          self.yaw = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.lastUpdate = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Orientation')
    if self.roll is not None:
      oprot.writeFieldBegin('roll', TType.DOUBLE, 1)
      oprot.writeDouble(self.roll)
      oprot.writeFieldEnd()
    if self.pitch is not None:
      oprot.writeFieldBegin('pitch', TType.DOUBLE, 2)
      oprot.writeDouble(self.pitch)
      oprot.writeFieldEnd()
    if self.yaw is not None:
      oprot.writeFieldBegin('yaw', TType.DOUBLE, 3)
      oprot.writeDouble(self.yaw)
      oprot.writeFieldEnd()
    if self.lastUpdate is not None:
      oprot.writeFieldBegin('lastUpdate', TType.I64, 4)
      oprot.writeI64(self.lastUpdate)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.roll)
    value = (value * 31) ^ hash(self.pitch)
    value = (value * 31) ^ hash(self.yaw)
    value = (value * 31) ^ hash(self.lastUpdate)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Region:
  """
  Attributes:
   - area
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'area', (TType.STRUCT,(Position, Position.thrift_spec)), None, ), # 1
  )

  def __init__(self, area=None,):
    self.area = area

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.area = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = Position()
            _elem5.read(iprot)
            self.area.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Region')
    if self.area is not None:
      oprot.writeFieldBegin('area', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.area))
      for iter6 in self.area:
        iter6.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.area)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Capability:
  """
  Attributes:
   - name
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'name', None, None, ), # 1
  )

  def __init__(self, name=None,):
    self.name = name

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Capability')
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 1)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.name)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Equipment:
  """
  Attributes:
   - type
   - consumption
   - name
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'type', None, None, ), # 1
    (2, TType.I32, 'consumption', None, None, ), # 2
    (3, TType.STRING, 'name', None, None, ), # 3
  )

  def __init__(self, type=None, consumption=None, name=None,):
    self.type = type
    self.consumption = consumption
    self.name = name

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.consumption = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Equipment')
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.I32, 1)
      oprot.writeI32(self.type)
      oprot.writeFieldEnd()
    if self.consumption is not None:
      oprot.writeFieldBegin('consumption', TType.I32, 2)
      oprot.writeI32(self.consumption)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 3)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.type)
    value = (value * 31) ^ hash(self.consumption)
    value = (value * 31) ^ hash(self.name)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Task:
  """
  Attributes:
   - taskTypeId
   - description
   - regionType
   - requiredTypes
   - maxSpeed
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'taskTypeId', None, None, ), # 1
    (2, TType.STRING, 'description', None, None, ), # 2
    (3, TType.I32, 'regionType', None, None, ), # 3
    (4, TType.LIST, 'requiredTypes', (TType.I32,None), None, ), # 4
    (5, TType.DOUBLE, 'maxSpeed', None, None, ), # 5
  )

  def __init__(self, taskTypeId=None, description=None, regionType=None, requiredTypes=None, maxSpeed=None,):
    self.taskTypeId = taskTypeId
    self.description = description
    self.regionType = regionType
    self.requiredTypes = requiredTypes
    self.maxSpeed = maxSpeed

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.taskTypeId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.description = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.regionType = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.requiredTypes = []
          (_etype10, _size7) = iprot.readListBegin()
          for _i11 in xrange(_size7):
            _elem12 = iprot.readI32();
            self.requiredTypes.append(_elem12)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.DOUBLE:
          self.maxSpeed = iprot.readDouble();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Task')
    if self.taskTypeId is not None:
      oprot.writeFieldBegin('taskTypeId', TType.I32, 1)
      oprot.writeI32(self.taskTypeId)
      oprot.writeFieldEnd()
    if self.description is not None:
      oprot.writeFieldBegin('description', TType.STRING, 2)
      oprot.writeString(self.description)
      oprot.writeFieldEnd()
    if self.regionType is not None:
      oprot.writeFieldBegin('regionType', TType.I32, 3)
      oprot.writeI32(self.regionType)
      oprot.writeFieldEnd()
    if self.requiredTypes is not None:
      oprot.writeFieldBegin('requiredTypes', TType.LIST, 4)
      oprot.writeListBegin(TType.I32, len(self.requiredTypes))
      for iter13 in self.requiredTypes:
        oprot.writeI32(iter13)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.maxSpeed is not None:
      oprot.writeFieldBegin('maxSpeed', TType.DOUBLE, 5)
      oprot.writeDouble(self.maxSpeed)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.taskTypeId)
    value = (value * 31) ^ hash(self.description)
    value = (value * 31) ^ hash(self.regionType)
    value = (value * 31) ^ hash(self.requiredTypes)
    value = (value * 31) ^ hash(self.maxSpeed)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Vehicle:
  """
  Attributes:
   - id
   - name
   - location
   - orientation
   - speed
   - currentSpeed
   - type
   - maxBattery
   - batteryStatus
   - consumption
   - equipments
   - onboardPlanner
   - lastUpdate
   - safetyDistance
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'id', None, None, ), # 1
    (2, TType.STRING, 'name', None, None, ), # 2
    (3, TType.STRUCT, 'location', (Position, Position.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'orientation', (Orientation, Orientation.thrift_spec), None, ), # 4
    (5, TType.DOUBLE, 'speed', None, None, ), # 5
    (6, TType.DOUBLE, 'currentSpeed', None, None, ), # 6
    (7, TType.I32, 'type', None, None, ), # 7
    (8, TType.I32, 'maxBattery', None, None, ), # 8
    (9, TType.DOUBLE, 'batteryStatus', None, None, ), # 9
    (10, TType.I32, 'consumption', None, None, ), # 10
    (11, TType.LIST, 'equipments', (TType.STRUCT,(Equipment, Equipment.thrift_spec)), None, ), # 11
    (12, TType.BOOL, 'onboardPlanner', None, None, ), # 12
    (13, TType.I64, 'lastUpdate', None, None, ), # 13
    (14, TType.DOUBLE, 'safetyDistance', None, None, ), # 14
  )

  def __init__(self, id=None, name=None, location=None, orientation=None, speed=None, currentSpeed=None, type=None, maxBattery=None, batteryStatus=None, consumption=None, equipments=None, onboardPlanner=None, lastUpdate=None, safetyDistance=None,):
    self.id = id
    self.name = name
    self.location = location
    self.orientation = orientation
    self.speed = speed
    self.currentSpeed = currentSpeed
    self.type = type
    self.maxBattery = maxBattery
    self.batteryStatus = batteryStatus
    self.consumption = consumption
    self.equipments = equipments
    self.onboardPlanner = onboardPlanner
    self.lastUpdate = lastUpdate
    self.safetyDistance = safetyDistance

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.location = Position()
          self.location.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.orientation = Orientation()
          self.orientation.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.DOUBLE:
          self.speed = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.DOUBLE:
          self.currentSpeed = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.maxBattery = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.DOUBLE:
          self.batteryStatus = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.consumption = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.LIST:
          self.equipments = []
          (_etype17, _size14) = iprot.readListBegin()
          for _i18 in xrange(_size14):
            _elem19 = Equipment()
            _elem19.read(iprot)
            self.equipments.append(_elem19)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.BOOL:
          self.onboardPlanner = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.I64:
          self.lastUpdate = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.DOUBLE:
          self.safetyDistance = iprot.readDouble();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Vehicle')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I32, 1)
      oprot.writeI32(self.id)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 2)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.location is not None:
      oprot.writeFieldBegin('location', TType.STRUCT, 3)
      self.location.write(oprot)
      oprot.writeFieldEnd()
    if self.orientation is not None:
      oprot.writeFieldBegin('orientation', TType.STRUCT, 4)
      self.orientation.write(oprot)
      oprot.writeFieldEnd()
    if self.speed is not None:
      oprot.writeFieldBegin('speed', TType.DOUBLE, 5)
      oprot.writeDouble(self.speed)
      oprot.writeFieldEnd()
    if self.currentSpeed is not None:
      oprot.writeFieldBegin('currentSpeed', TType.DOUBLE, 6)
      oprot.writeDouble(self.currentSpeed)
      oprot.writeFieldEnd()
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.I32, 7)
      oprot.writeI32(self.type)
      oprot.writeFieldEnd()
    if self.maxBattery is not None:
      oprot.writeFieldBegin('maxBattery', TType.I32, 8)
      oprot.writeI32(self.maxBattery)
      oprot.writeFieldEnd()
    if self.batteryStatus is not None:
      oprot.writeFieldBegin('batteryStatus', TType.DOUBLE, 9)
      oprot.writeDouble(self.batteryStatus)
      oprot.writeFieldEnd()
    if self.consumption is not None:
      oprot.writeFieldBegin('consumption', TType.I32, 10)
      oprot.writeI32(self.consumption)
      oprot.writeFieldEnd()
    if self.equipments is not None:
      oprot.writeFieldBegin('equipments', TType.LIST, 11)
      oprot.writeListBegin(TType.STRUCT, len(self.equipments))
      for iter20 in self.equipments:
        iter20.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.onboardPlanner is not None:
      oprot.writeFieldBegin('onboardPlanner', TType.BOOL, 12)
      oprot.writeBool(self.onboardPlanner)
      oprot.writeFieldEnd()
    if self.lastUpdate is not None:
      oprot.writeFieldBegin('lastUpdate', TType.I64, 13)
      oprot.writeI64(self.lastUpdate)
      oprot.writeFieldEnd()
    if self.safetyDistance is not None:
      oprot.writeFieldBegin('safetyDistance', TType.DOUBLE, 14)
      oprot.writeDouble(self.safetyDistance)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.id)
    value = (value * 31) ^ hash(self.name)
    value = (value * 31) ^ hash(self.location)
    value = (value * 31) ^ hash(self.orientation)
    value = (value * 31) ^ hash(self.speed)
    value = (value * 31) ^ hash(self.currentSpeed)
    value = (value * 31) ^ hash(self.type)
    value = (value * 31) ^ hash(self.maxBattery)
    value = (value * 31) ^ hash(self.batteryStatus)
    value = (value * 31) ^ hash(self.consumption)
    value = (value * 31) ^ hash(self.equipments)
    value = (value * 31) ^ hash(self.onboardPlanner)
    value = (value * 31) ^ hash(self.lastUpdate)
    value = (value * 31) ^ hash(self.safetyDistance)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Action:
  """
  Attributes:
   - relatedTask
   - actionId
   - area
   - speed
   - altitude
   - range
   - timeLapse
   - bearing
   - startTime
   - endTime
   - status
   - assignedVehicleId
   - parentActionId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'relatedTask', (Task, Task.thrift_spec), None, ), # 1
    (2, TType.I32, 'actionId', None, None, ), # 2
    (3, TType.STRUCT, 'area', (Region, Region.thrift_spec), None, ), # 3
    (4, TType.DOUBLE, 'speed', None, None, ), # 4
    (5, TType.DOUBLE, 'altitude', None, None, ), # 5
    (6, TType.DOUBLE, 'range', None, None, ), # 6
    (7, TType.I32, 'timeLapse', None, None, ), # 7
    (8, TType.STRUCT, 'bearing', (Orientation, Orientation.thrift_spec), None, ), # 8
    (9, TType.I32, 'startTime', None, None, ), # 9
    (10, TType.I32, 'endTime', None, None, ), # 10
    (11, TType.I32, 'status', None, None, ), # 11
    (12, TType.I32, 'assignedVehicleId', None, None, ), # 12
    (13, TType.I32, 'parentActionId', None, None, ), # 13
  )

  def __init__(self, relatedTask=None, actionId=None, area=None, speed=None, altitude=None, range=None, timeLapse=None, bearing=None, startTime=None, endTime=None, status=None, assignedVehicleId=None, parentActionId=None,):
    self.relatedTask = relatedTask
    self.actionId = actionId
    self.area = area
    self.speed = speed
    self.altitude = altitude
    self.range = range
    self.timeLapse = timeLapse
    self.bearing = bearing
    self.startTime = startTime
    self.endTime = endTime
    self.status = status
    self.assignedVehicleId = assignedVehicleId
    self.parentActionId = parentActionId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.relatedTask = Task()
          self.relatedTask.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.actionId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.area = Region()
          self.area.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.DOUBLE:
          self.speed = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.DOUBLE:
          self.altitude = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.DOUBLE:
          self.range = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.timeLapse = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRUCT:
          self.bearing = Orientation()
          self.bearing.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.startTime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.endTime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I32:
          self.status = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I32:
          self.assignedVehicleId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.I32:
          self.parentActionId = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Action')
    if self.relatedTask is not None:
      oprot.writeFieldBegin('relatedTask', TType.STRUCT, 1)
      self.relatedTask.write(oprot)
      oprot.writeFieldEnd()
    if self.actionId is not None:
      oprot.writeFieldBegin('actionId', TType.I32, 2)
      oprot.writeI32(self.actionId)
      oprot.writeFieldEnd()
    if self.area is not None:
      oprot.writeFieldBegin('area', TType.STRUCT, 3)
      self.area.write(oprot)
      oprot.writeFieldEnd()
    if self.speed is not None:
      oprot.writeFieldBegin('speed', TType.DOUBLE, 4)
      oprot.writeDouble(self.speed)
      oprot.writeFieldEnd()
    if self.altitude is not None:
      oprot.writeFieldBegin('altitude', TType.DOUBLE, 5)
      oprot.writeDouble(self.altitude)
      oprot.writeFieldEnd()
    if self.range is not None:
      oprot.writeFieldBegin('range', TType.DOUBLE, 6)
      oprot.writeDouble(self.range)
      oprot.writeFieldEnd()
    if self.timeLapse is not None:
      oprot.writeFieldBegin('timeLapse', TType.I32, 7)
      oprot.writeI32(self.timeLapse)
      oprot.writeFieldEnd()
    if self.bearing is not None:
      oprot.writeFieldBegin('bearing', TType.STRUCT, 8)
      self.bearing.write(oprot)
      oprot.writeFieldEnd()
    if self.startTime is not None:
      oprot.writeFieldBegin('startTime', TType.I32, 9)
      oprot.writeI32(self.startTime)
      oprot.writeFieldEnd()
    if self.endTime is not None:
      oprot.writeFieldBegin('endTime', TType.I32, 10)
      oprot.writeI32(self.endTime)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I32, 11)
      oprot.writeI32(self.status)
      oprot.writeFieldEnd()
    if self.assignedVehicleId is not None:
      oprot.writeFieldBegin('assignedVehicleId', TType.I32, 12)
      oprot.writeI32(self.assignedVehicleId)
      oprot.writeFieldEnd()
    if self.parentActionId is not None:
      oprot.writeFieldBegin('parentActionId', TType.I32, 13)
      oprot.writeI32(self.parentActionId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.relatedTask)
    value = (value * 31) ^ hash(self.actionId)
    value = (value * 31) ^ hash(self.area)
    value = (value * 31) ^ hash(self.speed)
    value = (value * 31) ^ hash(self.altitude)
    value = (value * 31) ^ hash(self.range)
    value = (value * 31) ^ hash(self.timeLapse)
    value = (value * 31) ^ hash(self.bearing)
    value = (value * 31) ^ hash(self.startTime)
    value = (value * 31) ^ hash(self.endTime)
    value = (value * 31) ^ hash(self.status)
    value = (value * 31) ^ hash(self.assignedVehicleId)
    value = (value * 31) ^ hash(self.parentActionId)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Mission:
  """
  Attributes:
   - missionId
   - navigationArea
   - forbiddenArea
   - surfacePoints
   - actions
   - vehicles
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'missionId', None, None, ), # 1
    (2, TType.STRUCT, 'navigationArea', (Region, Region.thrift_spec), None, ), # 2
    (3, TType.LIST, 'forbiddenArea', (TType.STRUCT,(Region, Region.thrift_spec)), None, ), # 3
    (4, TType.LIST, 'surfacePoints', (TType.STRUCT,(Position, Position.thrift_spec)), None, ), # 4
    (5, TType.LIST, 'actions', (TType.STRUCT,(Action, Action.thrift_spec)), None, ), # 5
    (6, TType.LIST, 'vehicles', (TType.STRUCT,(Vehicle, Vehicle.thrift_spec)), None, ), # 6
  )

  def __init__(self, missionId=None, navigationArea=None, forbiddenArea=None, surfacePoints=None, actions=None, vehicles=None,):
    self.missionId = missionId
    self.navigationArea = navigationArea
    self.forbiddenArea = forbiddenArea
    self.surfacePoints = surfacePoints
    self.actions = actions
    self.vehicles = vehicles

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.missionId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.navigationArea = Region()
          self.navigationArea.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.forbiddenArea = []
          (_etype24, _size21) = iprot.readListBegin()
          for _i25 in xrange(_size21):
            _elem26 = Region()
            _elem26.read(iprot)
            self.forbiddenArea.append(_elem26)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.surfacePoints = []
          (_etype30, _size27) = iprot.readListBegin()
          for _i31 in xrange(_size27):
            _elem32 = Position()
            _elem32.read(iprot)
            self.surfacePoints.append(_elem32)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.LIST:
          self.actions = []
          (_etype36, _size33) = iprot.readListBegin()
          for _i37 in xrange(_size33):
            _elem38 = Action()
            _elem38.read(iprot)
            self.actions.append(_elem38)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.LIST:
          self.vehicles = []
          (_etype42, _size39) = iprot.readListBegin()
          for _i43 in xrange(_size39):
            _elem44 = Vehicle()
            _elem44.read(iprot)
            self.vehicles.append(_elem44)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Mission')
    if self.missionId is not None:
      oprot.writeFieldBegin('missionId', TType.I32, 1)
      oprot.writeI32(self.missionId)
      oprot.writeFieldEnd()
    if self.navigationArea is not None:
      oprot.writeFieldBegin('navigationArea', TType.STRUCT, 2)
      self.navigationArea.write(oprot)
      oprot.writeFieldEnd()
    if self.forbiddenArea is not None:
      oprot.writeFieldBegin('forbiddenArea', TType.LIST, 3)
      oprot.writeListBegin(TType.STRUCT, len(self.forbiddenArea))
      for iter45 in self.forbiddenArea:
        iter45.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.surfacePoints is not None:
      oprot.writeFieldBegin('surfacePoints', TType.LIST, 4)
      oprot.writeListBegin(TType.STRUCT, len(self.surfacePoints))
      for iter46 in self.surfacePoints:
        iter46.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.actions is not None:
      oprot.writeFieldBegin('actions', TType.LIST, 5)
      oprot.writeListBegin(TType.STRUCT, len(self.actions))
      for iter47 in self.actions:
        iter47.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.vehicles is not None:
      oprot.writeFieldBegin('vehicles', TType.LIST, 6)
      oprot.writeListBegin(TType.STRUCT, len(self.vehicles))
      for iter48 in self.vehicles:
        iter48.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.missionId)
    value = (value * 31) ^ hash(self.navigationArea)
    value = (value * 31) ^ hash(self.forbiddenArea)
    value = (value * 31) ^ hash(self.surfacePoints)
    value = (value * 31) ^ hash(self.actions)
    value = (value * 31) ^ hash(self.vehicles)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class H2S:
  """
  Attributes:
   - h2sId
   - latitude
   - longitude
   - depth
   - h2s
   - time
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'h2sId', None, None, ), # 1
    (2, TType.DOUBLE, 'latitude', None, None, ), # 2
    (3, TType.DOUBLE, 'longitude', None, None, ), # 3
    (4, TType.DOUBLE, 'depth', None, None, ), # 4
    (5, TType.DOUBLE, 'h2s', None, None, ), # 5
    (6, TType.I64, 'time', None, None, ), # 6
  )

  def __init__(self, h2sId=None, latitude=None, longitude=None, depth=None, h2s=None, time=None,):
    self.h2sId = h2sId
    self.latitude = latitude
    self.longitude = longitude
    self.depth = depth
    self.h2s = h2s
    self.time = time

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.h2sId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.DOUBLE:
          self.latitude = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.DOUBLE:
          self.longitude = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.DOUBLE:
          self.depth = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.DOUBLE:
          self.h2s = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          self.time = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('H2S')
    if self.h2sId is not None:
      oprot.writeFieldBegin('h2sId', TType.I32, 1)
      oprot.writeI32(self.h2sId)
      oprot.writeFieldEnd()
    if self.latitude is not None:
      oprot.writeFieldBegin('latitude', TType.DOUBLE, 2)
      oprot.writeDouble(self.latitude)
      oprot.writeFieldEnd()
    if self.longitude is not None:
      oprot.writeFieldBegin('longitude', TType.DOUBLE, 3)
      oprot.writeDouble(self.longitude)
      oprot.writeFieldEnd()
    if self.depth is not None:
      oprot.writeFieldBegin('depth', TType.DOUBLE, 4)
      oprot.writeDouble(self.depth)
      oprot.writeFieldEnd()
    if self.h2s is not None:
      oprot.writeFieldBegin('h2s', TType.DOUBLE, 5)
      oprot.writeDouble(self.h2s)
      oprot.writeFieldEnd()
    if self.time is not None:
      oprot.writeFieldBegin('time', TType.I64, 6)
      oprot.writeI64(self.time)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.h2sId)
    value = (value * 31) ^ hash(self.latitude)
    value = (value * 31) ^ hash(self.longitude)
    value = (value * 31) ^ hash(self.depth)
    value = (value * 31) ^ hash(self.h2s)
    value = (value * 31) ^ hash(self.time)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Landmark:
  """
  Attributes:
   - landmarkId
   - name
   - latitude
   - longitude
   - url
   - time
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'landmarkId', None, None, ), # 1
    (2, TType.STRING, 'name', None, None, ), # 2
    (3, TType.DOUBLE, 'latitude', None, None, ), # 3
    (4, TType.DOUBLE, 'longitude', None, None, ), # 4
    (5, TType.STRING, 'url', None, None, ), # 5
    (6, TType.I64, 'time', None, None, ), # 6
  )

  def __init__(self, landmarkId=None, name=None, latitude=None, longitude=None, url=None, time=None,):
    self.landmarkId = landmarkId
    self.name = name
    self.latitude = latitude
    self.longitude = longitude
    self.url = url
    self.time = time

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.landmarkId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.DOUBLE:
          self.latitude = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.DOUBLE:
          self.longitude = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.url = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          self.time = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Landmark')
    if self.landmarkId is not None:
      oprot.writeFieldBegin('landmarkId', TType.I32, 1)
      oprot.writeI32(self.landmarkId)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 2)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.latitude is not None:
      oprot.writeFieldBegin('latitude', TType.DOUBLE, 3)
      oprot.writeDouble(self.latitude)
      oprot.writeFieldEnd()
    if self.longitude is not None:
      oprot.writeFieldBegin('longitude', TType.DOUBLE, 4)
      oprot.writeDouble(self.longitude)
      oprot.writeFieldEnd()
    if self.url is not None:
      oprot.writeFieldBegin('url', TType.STRING, 5)
      oprot.writeString(self.url)
      oprot.writeFieldEnd()
    if self.time is not None:
      oprot.writeFieldBegin('time', TType.I64, 6)
      oprot.writeI64(self.time)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.landmarkId)
    value = (value * 31) ^ hash(self.name)
    value = (value * 31) ^ hash(self.latitude)
    value = (value * 31) ^ hash(self.longitude)
    value = (value * 31) ^ hash(self.url)
    value = (value * 31) ^ hash(self.time)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Pressure:
  """
  Attributes:
   - pressureId
   - latitude
   - longitude
   - pressure
   - time
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'pressureId', None, None, ), # 1
    (2, TType.DOUBLE, 'latitude', None, None, ), # 2
    (3, TType.DOUBLE, 'longitude', None, None, ), # 3
    (4, TType.DOUBLE, 'pressure', None, None, ), # 4
    (5, TType.I64, 'time', None, None, ), # 5
  )

  def __init__(self, pressureId=None, latitude=None, longitude=None, pressure=None, time=None,):
    self.pressureId = pressureId
    self.latitude = latitude
    self.longitude = longitude
    self.pressure = pressure
    self.time = time

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.pressureId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.DOUBLE:
          self.latitude = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.DOUBLE:
          self.longitude = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.DOUBLE:
          self.pressure = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.time = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Pressure')
    if self.pressureId is not None:
      oprot.writeFieldBegin('pressureId', TType.I32, 1)
      oprot.writeI32(self.pressureId)
      oprot.writeFieldEnd()
    if self.latitude is not None:
      oprot.writeFieldBegin('latitude', TType.DOUBLE, 2)
      oprot.writeDouble(self.latitude)
      oprot.writeFieldEnd()
    if self.longitude is not None:
      oprot.writeFieldBegin('longitude', TType.DOUBLE, 3)
      oprot.writeDouble(self.longitude)
      oprot.writeFieldEnd()
    if self.pressure is not None:
      oprot.writeFieldBegin('pressure', TType.DOUBLE, 4)
      oprot.writeDouble(self.pressure)
      oprot.writeFieldEnd()
    if self.time is not None:
      oprot.writeFieldBegin('time', TType.I64, 5)
      oprot.writeI64(self.time)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.pressureId)
    value = (value * 31) ^ hash(self.latitude)
    value = (value * 31) ^ hash(self.longitude)
    value = (value * 31) ^ hash(self.pressure)
    value = (value * 31) ^ hash(self.time)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Temperature:
  """
  Attributes:
   - temperatureId
   - latitude
   - longitude
   - depth
   - temperature
   - time
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'temperatureId', None, None, ), # 1
    (2, TType.DOUBLE, 'latitude', None, None, ), # 2
    (3, TType.DOUBLE, 'longitude', None, None, ), # 3
    (4, TType.DOUBLE, 'depth', None, None, ), # 4
    (5, TType.DOUBLE, 'temperature', None, None, ), # 5
    (6, TType.I64, 'time', None, None, ), # 6
  )

  def __init__(self, temperatureId=None, latitude=None, longitude=None, depth=None, temperature=None, time=None,):
    self.temperatureId = temperatureId
    self.latitude = latitude
    self.longitude = longitude
    self.depth = depth
    self.temperature = temperature
    self.time = time

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.temperatureId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.DOUBLE:
          self.latitude = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.DOUBLE:
          self.longitude = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.DOUBLE:
          self.depth = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.DOUBLE:
          self.temperature = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          self.time = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Temperature')
    if self.temperatureId is not None:
      oprot.writeFieldBegin('temperatureId', TType.I32, 1)
      oprot.writeI32(self.temperatureId)
      oprot.writeFieldEnd()
    if self.latitude is not None:
      oprot.writeFieldBegin('latitude', TType.DOUBLE, 2)
      oprot.writeDouble(self.latitude)
      oprot.writeFieldEnd()
    if self.longitude is not None:
      oprot.writeFieldBegin('longitude', TType.DOUBLE, 3)
      oprot.writeDouble(self.longitude)
      oprot.writeFieldEnd()
    if self.depth is not None:
      oprot.writeFieldBegin('depth', TType.DOUBLE, 4)
      oprot.writeDouble(self.depth)
      oprot.writeFieldEnd()
    if self.temperature is not None:
      oprot.writeFieldBegin('temperature', TType.DOUBLE, 5)
      oprot.writeDouble(self.temperature)
      oprot.writeFieldEnd()
    if self.time is not None:
      oprot.writeFieldBegin('time', TType.I64, 6)
      oprot.writeI64(self.time)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.temperatureId)
    value = (value * 31) ^ hash(self.latitude)
    value = (value * 31) ^ hash(self.longitude)
    value = (value * 31) ^ hash(self.depth)
    value = (value * 31) ^ hash(self.temperature)
    value = (value * 31) ^ hash(self.time)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Ph:
  """
  Attributes:
   - phId
   - latitude
   - longitude
   - depth
   - ph
   - time
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'phId', None, None, ), # 1
    (2, TType.DOUBLE, 'latitude', None, None, ), # 2
    (3, TType.DOUBLE, 'longitude', None, None, ), # 3
    (4, TType.DOUBLE, 'depth', None, None, ), # 4
    (5, TType.DOUBLE, 'ph', None, None, ), # 5
    (6, TType.I64, 'time', None, None, ), # 6
  )

  def __init__(self, phId=None, latitude=None, longitude=None, depth=None, ph=None, time=None,):
    self.phId = phId
    self.latitude = latitude
    self.longitude = longitude
    self.depth = depth
    self.ph = ph
    self.time = time

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.phId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.DOUBLE:
          self.latitude = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.DOUBLE:
          self.longitude = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.DOUBLE:
          self.depth = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.DOUBLE:
          self.ph = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          self.time = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Ph')
    if self.phId is not None:
      oprot.writeFieldBegin('phId', TType.I32, 1)
      oprot.writeI32(self.phId)
      oprot.writeFieldEnd()
    if self.latitude is not None:
      oprot.writeFieldBegin('latitude', TType.DOUBLE, 2)
      oprot.writeDouble(self.latitude)
      oprot.writeFieldEnd()
    if self.longitude is not None:
      oprot.writeFieldBegin('longitude', TType.DOUBLE, 3)
      oprot.writeDouble(self.longitude)
      oprot.writeFieldEnd()
    if self.depth is not None:
      oprot.writeFieldBegin('depth', TType.DOUBLE, 4)
      oprot.writeDouble(self.depth)
      oprot.writeFieldEnd()
    if self.ph is not None:
      oprot.writeFieldBegin('ph', TType.DOUBLE, 5)
      oprot.writeDouble(self.ph)
      oprot.writeFieldEnd()
    if self.time is not None:
      oprot.writeFieldBegin('time', TType.I64, 6)
      oprot.writeI64(self.time)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.phId)
    value = (value * 31) ^ hash(self.latitude)
    value = (value * 31) ^ hash(self.longitude)
    value = (value * 31) ^ hash(self.depth)
    value = (value * 31) ^ hash(self.ph)
    value = (value * 31) ^ hash(self.time)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TimedSpeed:
  """
  Attributes:
   - speed
   - time
  """

  thrift_spec = (
    None, # 0
    (1, TType.DOUBLE, 'speed', None, None, ), # 1
    (2, TType.I64, 'time', None, None, ), # 2
  )

  def __init__(self, speed=None, time=None,):
    self.speed = speed
    self.time = time

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.DOUBLE:
          self.speed = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.time = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TimedSpeed')
    if self.speed is not None:
      oprot.writeFieldBegin('speed', TType.DOUBLE, 1)
      oprot.writeDouble(self.speed)
      oprot.writeFieldEnd()
    if self.time is not None:
      oprot.writeFieldBegin('time', TType.I64, 2)
      oprot.writeI64(self.time)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.speed)
    value = (value * 31) ^ hash(self.time)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Current:
  """
  Attributes:
   - currentId
   - latitude
   - longitude
   - depth
   - currentEast
   - currentNorth
   - time
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'currentId', None, None, ), # 1
    (2, TType.DOUBLE, 'latitude', None, None, ), # 2
    (3, TType.DOUBLE, 'longitude', None, None, ), # 3
    (4, TType.DOUBLE, 'depth', None, None, ), # 4
    (5, TType.DOUBLE, 'currentEast', None, None, ), # 5
    (6, TType.DOUBLE, 'currentNorth', None, None, ), # 6
    (7, TType.I64, 'time', None, None, ), # 7
  )

  def __init__(self, currentId=None, latitude=None, longitude=None, depth=None, currentEast=None, currentNorth=None, time=None,):
    self.currentId = currentId
    self.latitude = latitude
    self.longitude = longitude
    self.depth = depth
    self.currentEast = currentEast
    self.currentNorth = currentNorth
    self.time = time

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.currentId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.DOUBLE:
          self.latitude = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.DOUBLE:
          self.longitude = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.DOUBLE:
          self.depth = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.DOUBLE:
          self.currentEast = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.DOUBLE:
          self.currentNorth = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I64:
          self.time = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Current')
    if self.currentId is not None:
      oprot.writeFieldBegin('currentId', TType.I32, 1)
      oprot.writeI32(self.currentId)
      oprot.writeFieldEnd()
    if self.latitude is not None:
      oprot.writeFieldBegin('latitude', TType.DOUBLE, 2)
      oprot.writeDouble(self.latitude)
      oprot.writeFieldEnd()
    if self.longitude is not None:
      oprot.writeFieldBegin('longitude', TType.DOUBLE, 3)
      oprot.writeDouble(self.longitude)
      oprot.writeFieldEnd()
    if self.depth is not None:
      oprot.writeFieldBegin('depth', TType.DOUBLE, 4)
      oprot.writeDouble(self.depth)
      oprot.writeFieldEnd()
    if self.currentEast is not None:
      oprot.writeFieldBegin('currentEast', TType.DOUBLE, 5)
      oprot.writeDouble(self.currentEast)
      oprot.writeFieldEnd()
    if self.currentNorth is not None:
      oprot.writeFieldBegin('currentNorth', TType.DOUBLE, 6)
      oprot.writeDouble(self.currentNorth)
      oprot.writeFieldEnd()
    if self.time is not None:
      oprot.writeFieldBegin('time', TType.I64, 7)
      oprot.writeI64(self.time)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.currentId)
    value = (value * 31) ^ hash(self.latitude)
    value = (value * 31) ^ hash(self.longitude)
    value = (value * 31) ^ hash(self.depth)
    value = (value * 31) ^ hash(self.currentEast)
    value = (value * 31) ^ hash(self.currentNorth)
    value = (value * 31) ^ hash(self.time)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Event:
  """
  Attributes:
   - eventId
   - vehicleId
   - missionId
   - type
   - description
   - time
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'eventId', None, None, ), # 1
    (2, TType.I32, 'vehicleId', None, None, ), # 2
    (3, TType.I32, 'missionId', None, None, ), # 3
    (4, TType.I32, 'type', None, None, ), # 4
    (5, TType.STRING, 'description', None, None, ), # 5
    (6, TType.I64, 'time', None, None, ), # 6
  )

  def __init__(self, eventId=None, vehicleId=None, missionId=None, type=None, description=None, time=None,):
    self.eventId = eventId
    self.vehicleId = vehicleId
    self.missionId = missionId
    self.type = type
    self.description = description
    self.time = time

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.eventId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.vehicleId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.missionId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.description = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          self.time = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Event')
    if self.eventId is not None:
      oprot.writeFieldBegin('eventId', TType.I32, 1)
      oprot.writeI32(self.eventId)
      oprot.writeFieldEnd()
    if self.vehicleId is not None:
      oprot.writeFieldBegin('vehicleId', TType.I32, 2)
      oprot.writeI32(self.vehicleId)
      oprot.writeFieldEnd()
    if self.missionId is not None:
      oprot.writeFieldBegin('missionId', TType.I32, 3)
      oprot.writeI32(self.missionId)
      oprot.writeFieldEnd()
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.I32, 4)
      oprot.writeI32(self.type)
      oprot.writeFieldEnd()
    if self.description is not None:
      oprot.writeFieldBegin('description', TType.STRING, 5)
      oprot.writeString(self.description)
      oprot.writeFieldEnd()
    if self.time is not None:
      oprot.writeFieldBegin('time', TType.I64, 6)
      oprot.writeI64(self.time)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.eventId)
    value = (value * 31) ^ hash(self.vehicleId)
    value = (value * 31) ^ hash(self.missionId)
    value = (value * 31) ^ hash(self.type)
    value = (value * 31) ^ hash(self.description)
    value = (value * 31) ^ hash(self.time)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Salinity:
  """
  Attributes:
   - salinityId
   - missionId
   - vehicleId
   - position
   - salinity
   - time
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'salinityId', None, None, ), # 1
    (2, TType.I32, 'missionId', None, None, ), # 2
    (3, TType.I32, 'vehicleId', None, None, ), # 3
    (4, TType.STRUCT, 'position', (Position, Position.thrift_spec), None, ), # 4
    (5, TType.DOUBLE, 'salinity', None, None, ), # 5
    (6, TType.I64, 'time', None, None, ), # 6
  )

  def __init__(self, salinityId=None, missionId=None, vehicleId=None, position=None, salinity=None, time=None,):
    self.salinityId = salinityId
    self.missionId = missionId
    self.vehicleId = vehicleId
    self.position = position
    self.salinity = salinity
    self.time = time

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.salinityId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.missionId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.vehicleId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.position = Position()
          self.position.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.DOUBLE:
          self.salinity = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          self.time = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Salinity')
    if self.salinityId is not None:
      oprot.writeFieldBegin('salinityId', TType.I32, 1)
      oprot.writeI32(self.salinityId)
      oprot.writeFieldEnd()
    if self.missionId is not None:
      oprot.writeFieldBegin('missionId', TType.I32, 2)
      oprot.writeI32(self.missionId)
      oprot.writeFieldEnd()
    if self.vehicleId is not None:
      oprot.writeFieldBegin('vehicleId', TType.I32, 3)
      oprot.writeI32(self.vehicleId)
      oprot.writeFieldEnd()
    if self.position is not None:
      oprot.writeFieldBegin('position', TType.STRUCT, 4)
      self.position.write(oprot)
      oprot.writeFieldEnd()
    if self.salinity is not None:
      oprot.writeFieldBegin('salinity', TType.DOUBLE, 5)
      oprot.writeDouble(self.salinity)
      oprot.writeFieldEnd()
    if self.time is not None:
      oprot.writeFieldBegin('time', TType.I64, 6)
      oprot.writeI64(self.time)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.salinityId)
    value = (value * 31) ^ hash(self.missionId)
    value = (value * 31) ^ hash(self.vehicleId)
    value = (value * 31) ^ hash(self.position)
    value = (value * 31) ^ hash(self.salinity)
    value = (value * 31) ^ hash(self.time)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
